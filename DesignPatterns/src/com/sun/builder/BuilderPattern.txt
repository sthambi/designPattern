Builder Pattern:

	Problems:
		* How can a class create different representations of a complex object?
		* How can a class that includes creating a complex object be simplified?

	Solution:
		* Encapsulate creating and assembling the parts of a complex object in a separate Builder Object.
		* A class delegates object creation to a Builder object instead of creating the objects directly.
	
	Definition:	
		The intent of the Builder design pattern is to separate the construction of a complex object from its representation. By doing 
		so the same construction process can create different representations.
	
	Disadvantages of the Builder pattern include:
		* Requires creating a separate ConcreteBuilder for each different type of product.
		* Requires the builder classes to be mutable.
		* Data members of class aren't guaranteed to be initialized.
		* Dependency injection may be less supported. 
	
	Advantages of the Builder pattern include:
		* Allows you to vary a product’s internal representation.
		* Encapsulates code for construction and representation.
		* Provides control over steps of construction process.
				
	Reference:
		1. https://en.wikipedia.org/wiki/Builder_pattern#Java 	